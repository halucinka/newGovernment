'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

exports.validationSuccessful = validationSuccessful;
exports.and = and;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _rx = require('rx');

var _rx2 = _interopRequireDefault(_rx);

function validationSuccessful(result) {
    // Successful if result is (undefined, null or true)
    return result == null || result === true;
}

function and(rules) {
    return function (value) {
        return new _bluebird2['default'](function (resolve, reject) {
            if (rules.length === 0) {
                // Trivial case, there are no rules
                resolve(null);
            }
            // Beginning to validate
            var valResults = rules.map(function (rule) {
                return rule(value);
            });
            valResults.forEach(function (resPromise) {
                resPromise.then(function (result) {
                    var index = 0;
                    while (index < valResults.length && valResults[index].isFulfilled() && validationSuccessful(valResults[index].value())) {
                        index++;
                    }
                    var firstRelevant = index < valResults.length ? valResults[index] : valResults[valResults.length - 1];
                    if (firstRelevant.isFulfilled()) {
                        // The promise is completed
                        resolve(firstRelevant.value());
                    } else {// eslint-disable-line
                        // We don't know yet, if it's valid or which rule is first failed
                        // so just continue waiting
                    }
                });
            });
        });
    };
}

var Validate = (function (_React$Component) {
    _inherits(Validate, _React$Component);

    _createClass(Validate, null, [{
        key: 'defaultProps',
        value: {
            onValidation: function onValidation(v) {}
        },
        enumerable: true
    }]);

    function Validate(props) {
        var _this = this;

        _classCallCheck(this, Validate);

        _get(Object.getPrototypeOf(Validate.prototype), 'constructor', this).call(this, props);
        // Collect rules (functions) & promisify
        // Rule functions should have signature (value, callback)

        this.onInputChange = function (e) {
            // Input has changed -> fire event, should not show validation
            _this.props.onValidation(_this.buildValidationResponse(null, null, false));
            _this.subjectStream.onNext(e.target.value);
        };

        this.rules = this.children.slice(1).map(function (elem) {
            return function (value) {
                return elem.type(value, elem.props);
            };
        });
        this.subjectStream = new _rx2['default'].Subject();
        this.isInitialValidation = true;
    }

    _createClass(Validate, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            this.subscription = this.subjectStream.debounce(500).startWith(this.input.props.value).flatMapLatest(function (value) {
                return _rx2['default'].Observable.fromPromise(_this2.validate(value));
            }).subscribe(function (validationResult) {
                return _this2.props.onValidation(validationResult);
            });
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.subjectStream.dispose();
        }
    }, {
        key: 'buildValidationResponse',
        value: function buildValidationResponse(valid, error, showValidation) {
            return {
                'valid': valid,
                'error': error,
                'showValidation': showValidation
            };
        }
    }, {
        key: 'validate',
        value: function validate(value) {
            var _this3 = this;

            var shouldShowValidation = true;
            if (this.isInitialValidation) {
                shouldShowValidation = false;
                this.isInitialValidation = false;
            }
            this.props.onValidation(this.buildValidationResponse(null, null, shouldShowValidation));
            return and(this.rules)(value).then(function (result) {
                if (validationSuccessful(result)) {
                    // successfully (null, undefined, true)
                    return _this3.buildValidationResponse(true, null, shouldShowValidation);
                } else {
                    // There is a rule, which was broken, but all rules prior to it
                    // were followed => we found the breaking rule
                    return _this3.buildValidationResponse(false, result, shouldShowValidation);
                }
            });
        }
    }, {
        key: 'mergeFunctions',
        value: function mergeFunctions() {
            for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
                fns[_key] = arguments[_key];
            }

            return function (value) {
                return fns.filter(function (f) {
                    return f != null;
                }).forEach(function (f) {
                    return f(value);
                });
            };
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2['default'].cloneElement(this.input, {
                'onChange': this.mergeFunctions(this.input.props.onChange, this.onInputChange)
            }, this.input.props.children);
        }
    }, {
        key: 'children',
        get: function get() {
            var c = this.props.children;
            return c instanceof Array ? c : [c];
        }
    }, {
        key: 'input',
        get: function get() {
            return this.children[0];
        }
    }]);

    return Validate;
})(_react2['default'].Component);

exports.Validate = Validate;