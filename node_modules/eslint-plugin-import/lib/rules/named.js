'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _coreGetExports = require('../core/getExports');

var _coreGetExports2 = _interopRequireDefault(_coreGetExports);

module.exports = function (context) {
  function checkSpecifiers(key, type, node) {
    if (node.source == null) return; // local export, ignore

    if (!node.specifiers.some(function (im) {
      return im.type === type;
    })) {
      return; // no named imports/exports
    }

    var imports = _coreGetExports2['default'].get(node.source.value, context);
    if (imports == null) return;

    if (imports.errors.length) {
      context.report({
        node: node.source,
        message: 'Parse errors in imported module ' + ('\'' + node.source.value + '\'.')
      });
      return;
    }

    var names = imports.named;

    node.specifiers.forEach(function (im) {
      if (im.type !== type) return;

      if (!names.has(im[key].name)) {
        context.report(im[key], im[key].name + ' not found in \'' + node.source.value + '\'');
      }
    });
  }

  return {
    'ImportDeclaration': checkSpecifiers.bind(null, 'imported', 'ImportSpecifier'),

    'ExportNamedDeclaration': checkSpecifiers.bind(null, 'local', 'ExportSpecifier')
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL25hbWVkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OEJBQW9CLG9CQUFvQjs7OztBQUV4QyxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsT0FBTyxFQUFFO0FBQ2xDLFdBQVMsZUFBZSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ3hDLFFBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQUUsT0FBTTs7QUFFL0IsUUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQ2IsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO0FBQUUsYUFBTyxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQTtLQUFFLENBQUMsRUFBRTtBQUN0RCxhQUFNO0tBQ1A7O0FBRUQsUUFBTSxPQUFPLEdBQUcsNEJBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBQ3ZELFFBQUksT0FBTyxJQUFJLElBQUksRUFBRSxPQUFNOztBQUUzQixRQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQ3pCLGFBQU8sQ0FBQyxNQUFNLENBQUM7QUFDYixZQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU07QUFDakIsZUFBTyxFQUFFLDZDQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxTQUFJO09BQ25DLENBQUMsQ0FBQTtBQUNGLGFBQU07S0FDUDs7QUFFRCxRQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFBOztBQUV6QixRQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRTtBQUNwQyxVQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFLE9BQU07O0FBRTVCLFVBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUM1QixlQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFDcEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQTtPQUNoRTtLQUNGLENBQUMsQ0FBQTtHQUNIOztBQUVELFNBQU87QUFDTCx1QkFBbUIsRUFBRSxlQUFlLENBQUMsSUFBSSxDQUFFLElBQUksRUFDSixVQUFVLEVBQ1YsaUJBQWlCLENBQ2xCOztBQUUxQyw0QkFBd0IsRUFBRSxlQUFlLENBQUMsSUFBSSxDQUFFLElBQUksRUFDSixPQUFPLEVBQ1AsaUJBQWlCLENBQ2xCO0dBQ2hELENBQUE7Q0FFRixDQUFBIiwiZmlsZSI6InJ1bGVzL25hbWVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV4cG9ydHMgZnJvbSAnLi4vY29yZS9nZXRFeHBvcnRzJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIGZ1bmN0aW9uIGNoZWNrU3BlY2lmaWVycyhrZXksIHR5cGUsIG5vZGUpIHtcbiAgICBpZiAobm9kZS5zb3VyY2UgPT0gbnVsbCkgcmV0dXJuIC8vIGxvY2FsIGV4cG9ydCwgaWdub3JlXG5cbiAgICBpZiAoIW5vZGUuc3BlY2lmaWVyc1xuICAgICAgICAgIC5zb21lKGZ1bmN0aW9uIChpbSkgeyByZXR1cm4gaW0udHlwZSA9PT0gdHlwZSB9KSkge1xuICAgICAgcmV0dXJuIC8vIG5vIG5hbWVkIGltcG9ydHMvZXhwb3J0c1xuICAgIH1cblxuICAgIGNvbnN0IGltcG9ydHMgPSBFeHBvcnRzLmdldChub2RlLnNvdXJjZS52YWx1ZSwgY29udGV4dClcbiAgICBpZiAoaW1wb3J0cyA9PSBudWxsKSByZXR1cm5cblxuICAgIGlmIChpbXBvcnRzLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0KHtcbiAgICAgICAgbm9kZTogbm9kZS5zb3VyY2UsXG4gICAgICAgIG1lc3NhZ2U6IGBQYXJzZSBlcnJvcnMgaW4gaW1wb3J0ZWQgbW9kdWxlIGAgK1xuICAgICAgICAgICAgICAgICBgJyR7bm9kZS5zb3VyY2UudmFsdWV9Jy5gLFxuICAgICAgfSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBuYW1lcyA9IGltcG9ydHMubmFtZWRcblxuICAgIG5vZGUuc3BlY2lmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChpbSkge1xuICAgICAgaWYgKGltLnR5cGUgIT09IHR5cGUpIHJldHVyblxuXG4gICAgICBpZiAoIW5hbWVzLmhhcyhpbVtrZXldLm5hbWUpKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0KGltW2tleV0sXG4gICAgICAgICAgaW1ba2V5XS5uYW1lICsgJyBub3QgZm91bmQgaW4gXFwnJyArIG5vZGUuc291cmNlLnZhbHVlICsgJ1xcJycpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgJ0ltcG9ydERlY2xhcmF0aW9uJzogY2hlY2tTcGVjaWZpZXJzLmJpbmQoIG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJ2ltcG9ydGVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAnSW1wb3J0U3BlY2lmaWVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcblxuICAgICdFeHBvcnROYW1lZERlY2xhcmF0aW9uJzogY2hlY2tTcGVjaWZpZXJzLmJpbmQoIG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAnbG9jYWwnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJ0V4cG9ydFNwZWNpZmllcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgfVxuXG59XG4iXX0=