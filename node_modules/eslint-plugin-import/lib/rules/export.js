'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Set = require('babel-runtime/core-js/set')['default'];

var _Map = require('babel-runtime/core-js/map')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _coreGetExports = require('../core/getExports');

var _coreGetExports2 = _interopRequireDefault(_coreGetExports);

module.exports = function (context) {
  var defaults = new _Set(),
      named = new _Map();

  function addNamed(name, node) {
    var nodes = named.get(name);

    if (nodes == null) {
      nodes = new _Set();
      named.set(name, nodes);
    }

    nodes.add(node);
  }

  return {
    'ExportDefaultDeclaration': function ExportDefaultDeclaration(node) {
      defaults.add(node);
    },

    'ExportSpecifier': function ExportSpecifier(node) {
      addNamed(node.exported.name, node.exported);
    },

    'ExportNamedDeclaration': function ExportNamedDeclaration(node) {
      if (node.declaration == null) return;

      if (node.declaration.id != null) {
        addNamed(node.declaration.id.name, node.declaration.id);
      }

      if (node.declaration.declarations != null) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(node.declaration.declarations), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var declaration = _step.value;

            (0, _coreGetExports.recursivePatternCapture)(declaration.id, function (v) {
              return addNamed(v.name, v);
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    },

    'ExportAllDeclaration': function ExportAllDeclaration(node) {
      if (node.source == null) return; // not sure if this is ever true

      var remoteExports = _coreGetExports2['default'].get(node.source.value, context);
      if (remoteExports == null) return;

      if (remoteExports.errors.length) {
        context.report({
          node: node.source,
          message: 'Parse errors in imported module ' + ('\'' + node.source.value + '\'.')
        });
        return;
      }

      if (!remoteExports.hasNamed) {
        context.report(node.source, 'No named exports found in module \'' + node.source.value + '\'.');
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = _getIterator(remoteExports.named), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _name = _step2.value;

          addNamed(_name, node);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
            _iterator2['return']();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    },

    'Program:exit': function ProgramExit() {
      if (defaults.size > 1) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = _getIterator(defaults), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var node = _step3.value;

            context.report(node, 'Multiple default exports.');
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3['return']) {
              _iterator3['return']();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = _getIterator(named), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var _step4$value = _slicedToArray(_step4.value, 2);

          var _name2 = _step4$value[0];
          var nodes = _step4$value[1];

          if (nodes.size <= 1) continue;

          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = _getIterator(nodes), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var node = _step5.value;

              context.report(node, 'Multiple exports of name \'' + _name2 + '\'.');
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5['return']) {
                _iterator5['return']();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4['return']) {
            _iterator4['return']();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }
  };
};
//# sourceMappingURL=data:application/json;base64,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QUcsQ0FBQyxFQUFFOzs7Ozs7QUFDckIsNkNBQWlCLFFBQVEsaUhBQUU7Z0JBQWxCLElBQUk7O0FBQ1gsbUJBQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLDJCQUEyQixDQUFDLENBQUE7V0FDbEQ7Ozs7Ozs7Ozs7Ozs7OztPQUNGOzs7Ozs7O0FBRUQsMkNBQTBCLEtBQUssaUhBQUU7OztjQUF2QixNQUFJO2NBQUUsS0FBSzs7QUFDbkIsY0FBSSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxTQUFROzs7Ozs7O0FBRTdCLCtDQUFpQixLQUFLLGlIQUFFO2tCQUFmLElBQUk7O0FBQ1gscUJBQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxrQ0FBK0IsTUFBSSxTQUFLLENBQUE7YUFDNUQ7Ozs7Ozs7Ozs7Ozs7OztTQUNGOzs7Ozs7Ozs7Ozs7Ozs7S0FDRjtHQUNGLENBQUE7Q0FDRixDQUFBIiwiZmlsZSI6InJ1bGVzL2V4cG9ydC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFeHBvcnRNYXAsIHsgcmVjdXJzaXZlUGF0dGVybkNhcHR1cmUgfSBmcm9tICcuLi9jb3JlL2dldEV4cG9ydHMnXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgY29uc3QgZGVmYXVsdHMgPSBuZXcgU2V0KClcbiAgICAgICwgbmFtZWQgPSBuZXcgTWFwKClcblxuICBmdW5jdGlvbiBhZGROYW1lZChuYW1lLCBub2RlKSB7XG4gICAgbGV0IG5vZGVzID0gbmFtZWQuZ2V0KG5hbWUpXG5cbiAgICBpZiAobm9kZXMgPT0gbnVsbCkge1xuICAgICAgbm9kZXMgPSBuZXcgU2V0KClcbiAgICAgIG5hbWVkLnNldChuYW1lLCBub2RlcylcbiAgICB9XG5cbiAgICBub2Rlcy5hZGQobm9kZSlcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgJ0V4cG9ydERlZmF1bHREZWNsYXJhdGlvbic6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBkZWZhdWx0cy5hZGQobm9kZSlcbiAgICB9LFxuXG4gICAgJ0V4cG9ydFNwZWNpZmllcic6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBhZGROYW1lZChub2RlLmV4cG9ydGVkLm5hbWUsIG5vZGUuZXhwb3J0ZWQpXG4gICAgfSxcblxuICAgICdFeHBvcnROYW1lZERlY2xhcmF0aW9uJzogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmRlY2xhcmF0aW9uID09IG51bGwpIHJldHVyblxuXG4gICAgICBpZiAobm9kZS5kZWNsYXJhdGlvbi5pZCAhPSBudWxsKSB7XG4gICAgICAgIGFkZE5hbWVkKG5vZGUuZGVjbGFyYXRpb24uaWQubmFtZSwgbm9kZS5kZWNsYXJhdGlvbi5pZClcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUuZGVjbGFyYXRpb24uZGVjbGFyYXRpb25zICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgZGVjbGFyYXRpb24gb2Ygbm9kZS5kZWNsYXJhdGlvbi5kZWNsYXJhdGlvbnMpIHtcbiAgICAgICAgICByZWN1cnNpdmVQYXR0ZXJuQ2FwdHVyZShkZWNsYXJhdGlvbi5pZCwgdiA9PiBhZGROYW1lZCh2Lm5hbWUsIHYpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgICdFeHBvcnRBbGxEZWNsYXJhdGlvbic6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBpZiAobm9kZS5zb3VyY2UgPT0gbnVsbCkgcmV0dXJuIC8vIG5vdCBzdXJlIGlmIHRoaXMgaXMgZXZlciB0cnVlXG5cbiAgICAgIGNvbnN0IHJlbW90ZUV4cG9ydHMgPSBFeHBvcnRNYXAuZ2V0KG5vZGUuc291cmNlLnZhbHVlLCBjb250ZXh0KVxuICAgICAgaWYgKHJlbW90ZUV4cG9ydHMgPT0gbnVsbCkgcmV0dXJuXG5cbiAgICAgIGlmIChyZW1vdGVFeHBvcnRzLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnQoe1xuICAgICAgICAgIG5vZGU6IG5vZGUuc291cmNlLFxuICAgICAgICAgIG1lc3NhZ2U6IGBQYXJzZSBlcnJvcnMgaW4gaW1wb3J0ZWQgbW9kdWxlIGAgK1xuICAgICAgICAgICAgICAgICAgIGAnJHtub2RlLnNvdXJjZS52YWx1ZX0nLmAsXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoIXJlbW90ZUV4cG9ydHMuaGFzTmFtZWQpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnQobm9kZS5zb3VyY2UsXG4gICAgICAgICAgYE5vIG5hbWVkIGV4cG9ydHMgZm91bmQgaW4gbW9kdWxlICcke25vZGUuc291cmNlLnZhbHVlfScuYClcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgbmFtZSBvZiByZW1vdGVFeHBvcnRzLm5hbWVkKSB7XG4gICAgICAgIGFkZE5hbWVkKG5hbWUsIG5vZGUpXG4gICAgICB9XG4gICAgfSxcblxuICAgICdQcm9ncmFtOmV4aXQnOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZGVmYXVsdHMuc2l6ZSA+IDEpIHtcbiAgICAgICAgZm9yIChsZXQgbm9kZSBvZiBkZWZhdWx0cykge1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0KG5vZGUsICdNdWx0aXBsZSBkZWZhdWx0IGV4cG9ydHMuJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBbbmFtZSwgbm9kZXNdIG9mIG5hbWVkKSB7XG4gICAgICAgIGlmIChub2Rlcy5zaXplIDw9IDEpIGNvbnRpbnVlXG5cbiAgICAgICAgZm9yIChsZXQgbm9kZSBvZiBub2Rlcykge1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0KG5vZGUsIGBNdWx0aXBsZSBleHBvcnRzIG9mIG5hbWUgJyR7bmFtZX0nLmApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICB9XG59XG4iXX0=