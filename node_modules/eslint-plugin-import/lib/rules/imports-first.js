'use strict';

module.exports = function (context) {
  return {
    'Program': function Program(n) {
      var body = n.body,
          absoluteFirst = context.options[0] === 'absolute-first';
      var last = -1,
          anyRelative = false;
      body.forEach(function (node, i) {
        if (node.type === 'ImportDeclaration') {
          if (absoluteFirst) {
            if (/^\./.test(node.source.value)) {
              anyRelative = true;
            } else if (anyRelative) {
              context.report({
                node: node.source,
                message: 'Absolute imports should come before relative imports.'
              });
            }
          }
          if (i !== ++last) {
            context.report({
              node: node,
              message: 'Import in body of module; reorder to top.'
            });
          }
        }
      });
    }
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL2ltcG9ydHMtZmlyc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsT0FBTyxFQUFFO0FBQ2xDLFNBQU87QUFDTCxhQUFTLEVBQUUsaUJBQVUsQ0FBQyxFQUFFO0FBQ3RCLFVBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJO1VBQ2IsYUFBYSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssZ0JBQWdCLENBQUE7QUFDN0QsVUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1VBQ1QsV0FBVyxHQUFHLEtBQUssQ0FBQTtBQUN2QixVQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUMsRUFBQztBQUM3QixZQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssbUJBQW1CLEVBQUU7QUFDckMsY0FBSSxhQUFhLEVBQUU7QUFDakIsZ0JBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ2pDLHlCQUFXLEdBQUcsSUFBSSxDQUFBO2FBQ25CLE1BQU0sSUFBSSxXQUFXLEVBQUU7QUFDdEIscUJBQU8sQ0FBQyxNQUFNLENBQUM7QUFDYixvQkFBSSxFQUFFLElBQUksQ0FBQyxNQUFNO0FBQ2pCLHVCQUFPLEVBQUUsdURBQXVEO2VBQ2pFLENBQUMsQ0FBQTthQUNIO1dBQ0Y7QUFDRCxjQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtBQUNoQixtQkFBTyxDQUFDLE1BQU0sQ0FBQztBQUNiLGtCQUFJLEVBQUosSUFBSTtBQUNKLHFCQUFPLEVBQUUsMkNBQTJDO2FBQ3JELENBQUMsQ0FBQTtXQUNIO1NBQ0Y7T0FDRixDQUFDLENBQUE7S0FDSDtHQUNGLENBQUE7Q0FDRixDQUFBIiwiZmlsZSI6InJ1bGVzL2ltcG9ydHMtZmlyc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgJ1Byb2dyYW0nOiBmdW5jdGlvbiAobikge1xuICAgICAgY29uc3QgYm9keSA9IG4uYm9keVxuICAgICAgICAgICwgYWJzb2x1dGVGaXJzdCA9IGNvbnRleHQub3B0aW9uc1swXSA9PT0gJ2Fic29sdXRlLWZpcnN0J1xuICAgICAgbGV0IGxhc3QgPSAtMVxuICAgICAgICAsIGFueVJlbGF0aXZlID0gZmFsc2VcbiAgICAgIGJvZHkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSwgaSl7XG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdJbXBvcnREZWNsYXJhdGlvbicpIHtcbiAgICAgICAgICBpZiAoYWJzb2x1dGVGaXJzdCkge1xuICAgICAgICAgICAgaWYgKC9eXFwuLy50ZXN0KG5vZGUuc291cmNlLnZhbHVlKSkge1xuICAgICAgICAgICAgICBhbnlSZWxhdGl2ZSA9IHRydWVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYW55UmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgY29udGV4dC5yZXBvcnQoe1xuICAgICAgICAgICAgICAgIG5vZGU6IG5vZGUuc291cmNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBYnNvbHV0ZSBpbXBvcnRzIHNob3VsZCBjb21lIGJlZm9yZSByZWxhdGl2ZSBpbXBvcnRzLicsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpICE9PSArK2xhc3QpIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0KHtcbiAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ0ltcG9ydCBpbiBib2R5IG9mIG1vZHVsZTsgcmVvcmRlciB0byB0b3AuJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gIH1cbn1cbiJdfQ==