/**
 * @fileOverview Ensures that an imported path exists, given resolution rules.
 * @author Ben Mosher
 */
'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _coreResolve = require('../core/resolve');

var _coreResolve2 = _interopRequireDefault(_coreResolve);

module.exports = function (context) {

  function checkSourceValue(source) {
    if (source == null) return;

    if ((0, _coreResolve2['default'])(source.value, context) === undefined) {
      context.report(source, 'Unable to resolve path to module \'' + source.value + '\'.');
    }
  }

  // for import-y declarations
  function checkSource(node) {
    checkSourceValue(node.source);
  }

  // for CommonJS `require` calls
  // adapted from @mctep: http://git.io/v4rAu
  function checkCommon(call) {
    if (call.callee.type !== 'Identifier') return;
    if (call.callee.name !== 'require') return;
    if (call.arguments.length !== 1) return;

    var modulePath = call.arguments[0];
    if (modulePath.type !== 'Literal') return;
    if (typeof modulePath.value !== 'string') return;

    checkSourceValue(modulePath);
  }

  function checkAMD(call) {
    if (call.callee.type !== 'Identifier') return;
    if (call.callee.name !== 'require' && call.callee.name !== 'define') return;
    if (call.arguments.length !== 2) return;

    var modules = call.arguments[0];
    if (modules.type !== 'ArrayExpression') return;

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(modules.elements), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var element = _step.value;

        if (element.type !== 'Literal') continue;
        if (typeof element.value !== 'string') continue;

        if (element.value === 'require' || element.value === 'exports') continue; // magic modules: http://git.io/vByan

        checkSourceValue(element);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  var visitors = {
    'ImportDeclaration': checkSource,
    'ExportNamedDeclaration': checkSource,
    'ExportAllDeclaration': checkSource
  };

  if (context.options[0] != null) {
    (function () {
      var _context$options$0 = context.options[0];
      var commonjs = _context$options$0.commonjs;
      var amd = _context$options$0.amd;

      if (commonjs || amd) {
        visitors['CallExpression'] = function (call) {
          if (commonjs) checkCommon(call);
          if (amd) checkAMD(call);
        };
      }
    })();
  }

  return visitors;
};

module.exports.schema = [{
  'type': 'object',
  'properties': {
    'commonjs': { 'type': 'boolean' },
    'amd': { 'type': 'boolean' }
  },
  'additionalProperties': false
}];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL25vLXVucmVzb2x2ZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OzsyQkFJb0IsaUJBQWlCOzs7O0FBRXJDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxPQUFPLEVBQUU7O0FBRWxDLFdBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO0FBQ2hDLFFBQUksTUFBTSxJQUFJLElBQUksRUFBRSxPQUFNOztBQUUxQixRQUFJLDhCQUFRLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQ2hELGFBQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUNuQixxQ0FBcUMsR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFBO0tBQ2hFO0dBQ0Y7OztBQUdELFdBQVMsV0FBVyxDQUFDLElBQUksRUFBRTtBQUN6QixvQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7R0FDOUI7Ozs7QUFJRCxXQUFTLFdBQVcsQ0FBQyxJQUFJLEVBQUU7QUFDekIsUUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxZQUFZLEVBQUUsT0FBTTtBQUM3QyxRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRSxPQUFNO0FBQzFDLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLE9BQU07O0FBRXZDLFFBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDcEMsUUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRSxPQUFNO0FBQ3pDLFFBQUksT0FBTyxVQUFVLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRSxPQUFNOztBQUVoRCxvQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtHQUM3Qjs7QUFFRCxXQUFTLFFBQVEsQ0FBQyxJQUFJLEVBQUU7QUFDdEIsUUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxZQUFZLEVBQUUsT0FBTTtBQUM3QyxRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFLE9BQU07QUFDekMsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsT0FBTTs7QUFFdkMsUUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNqQyxRQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssaUJBQWlCLEVBQUUsT0FBTTs7Ozs7OztBQUU5Qyx3Q0FBb0IsT0FBTyxDQUFDLFFBQVEsNEdBQUU7WUFBN0IsT0FBTzs7QUFDZCxZQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFLFNBQVE7QUFDeEMsWUFBSSxPQUFPLE9BQU8sQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFLFNBQVE7O0FBRS9DLFlBQUksT0FBTyxDQUFDLEtBQUssS0FBSyxTQUFTLElBQzNCLE9BQU8sQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFLFNBQVE7O0FBRXpDLHdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFBO09BQzFCOzs7Ozs7Ozs7Ozs7Ozs7R0FDRjs7QUFFRCxNQUFNLFFBQVEsR0FBRztBQUNmLHVCQUFtQixFQUFFLFdBQVc7QUFDaEMsNEJBQXdCLEVBQUUsV0FBVztBQUNyQywwQkFBc0IsRUFBRSxXQUFXO0dBQ3BDLENBQUE7O0FBRUQsTUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTs7K0JBQ0osT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7VUFBcEMsUUFBUSxzQkFBUixRQUFRO1VBQUUsR0FBRyxzQkFBSCxHQUFHOztBQUVyQixVQUFJLFFBQVEsSUFBSSxHQUFHLEVBQUU7QUFDbkIsZ0JBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLFVBQVUsSUFBSSxFQUFFO0FBQzNDLGNBQUksUUFBUSxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUMvQixjQUFJLEdBQUcsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDeEIsQ0FBQTtPQUNGOztHQUNGOztBQUVELFNBQU8sUUFBUSxDQUFBO0NBQ2hCLENBQUE7O0FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FDdEI7QUFDRSxRQUFNLEVBQUUsUUFBUTtBQUNoQixjQUFZLEVBQUU7QUFDWixjQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFO0FBQ2pDLFNBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUU7R0FDN0I7QUFDRCx3QkFBc0IsRUFBRSxLQUFLO0NBQzlCLENBQ0YsQ0FBQSIsImZpbGUiOiJydWxlcy9uby11bnJlc29sdmVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IEVuc3VyZXMgdGhhdCBhbiBpbXBvcnRlZCBwYXRoIGV4aXN0cywgZ2l2ZW4gcmVzb2x1dGlvbiBydWxlcy5cbiAqIEBhdXRob3IgQmVuIE1vc2hlclxuICovXG5pbXBvcnQgcmVzb2x2ZSBmcm9tICcuLi9jb3JlL3Jlc29sdmUnXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcblxuICBmdW5jdGlvbiBjaGVja1NvdXJjZVZhbHVlKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuXG5cbiAgICBpZiAocmVzb2x2ZShzb3VyY2UudmFsdWUsIGNvbnRleHQpID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0KHNvdXJjZSxcbiAgICAgICAgJ1VuYWJsZSB0byByZXNvbHZlIHBhdGggdG8gbW9kdWxlIFxcJycgKyBzb3VyY2UudmFsdWUgKyAnXFwnLicpXG4gICAgfVxuICB9XG5cbiAgLy8gZm9yIGltcG9ydC15IGRlY2xhcmF0aW9uc1xuICBmdW5jdGlvbiBjaGVja1NvdXJjZShub2RlKSB7XG4gICAgY2hlY2tTb3VyY2VWYWx1ZShub2RlLnNvdXJjZSlcbiAgfVxuXG4gIC8vIGZvciBDb21tb25KUyBgcmVxdWlyZWAgY2FsbHNcbiAgLy8gYWRhcHRlZCBmcm9tIEBtY3RlcDogaHR0cDovL2dpdC5pby92NHJBdVxuICBmdW5jdGlvbiBjaGVja0NvbW1vbihjYWxsKSB7XG4gICAgaWYgKGNhbGwuY2FsbGVlLnR5cGUgIT09ICdJZGVudGlmaWVyJykgcmV0dXJuXG4gICAgaWYgKGNhbGwuY2FsbGVlLm5hbWUgIT09ICdyZXF1aXJlJykgcmV0dXJuXG4gICAgaWYgKGNhbGwuYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkgcmV0dXJuXG5cbiAgICBjb25zdCBtb2R1bGVQYXRoID0gY2FsbC5hcmd1bWVudHNbMF1cbiAgICBpZiAobW9kdWxlUGF0aC50eXBlICE9PSAnTGl0ZXJhbCcpIHJldHVyblxuICAgIGlmICh0eXBlb2YgbW9kdWxlUGF0aC52YWx1ZSAhPT0gJ3N0cmluZycpIHJldHVyblxuXG4gICAgY2hlY2tTb3VyY2VWYWx1ZShtb2R1bGVQYXRoKVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tBTUQoY2FsbCkge1xuICAgIGlmIChjYWxsLmNhbGxlZS50eXBlICE9PSAnSWRlbnRpZmllcicpIHJldHVyblxuICAgIGlmIChjYWxsLmNhbGxlZS5uYW1lICE9PSAncmVxdWlyZScgJiZcbiAgICAgICAgY2FsbC5jYWxsZWUubmFtZSAhPT0gJ2RlZmluZScpIHJldHVyblxuICAgIGlmIChjYWxsLmFyZ3VtZW50cy5sZW5ndGggIT09IDIpIHJldHVyblxuXG4gICAgY29uc3QgbW9kdWxlcyA9IGNhbGwuYXJndW1lbnRzWzBdXG4gICAgaWYgKG1vZHVsZXMudHlwZSAhPT0gJ0FycmF5RXhwcmVzc2lvbicpIHJldHVyblxuXG4gICAgZm9yIChsZXQgZWxlbWVudCBvZiBtb2R1bGVzLmVsZW1lbnRzKSB7XG4gICAgICBpZiAoZWxlbWVudC50eXBlICE9PSAnTGl0ZXJhbCcpIGNvbnRpbnVlXG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnQudmFsdWUgIT09ICdzdHJpbmcnKSBjb250aW51ZVxuXG4gICAgICBpZiAoZWxlbWVudC52YWx1ZSA9PT0gJ3JlcXVpcmUnIHx8XG4gICAgICAgICAgZWxlbWVudC52YWx1ZSA9PT0gJ2V4cG9ydHMnKSBjb250aW51ZSAvLyBtYWdpYyBtb2R1bGVzOiBodHRwOi8vZ2l0LmlvL3ZCeWFuXG5cbiAgICAgIGNoZWNrU291cmNlVmFsdWUoZWxlbWVudClcbiAgICB9XG4gIH1cblxuICBjb25zdCB2aXNpdG9ycyA9IHtcbiAgICAnSW1wb3J0RGVjbGFyYXRpb24nOiBjaGVja1NvdXJjZSxcbiAgICAnRXhwb3J0TmFtZWREZWNsYXJhdGlvbic6IGNoZWNrU291cmNlLFxuICAgICdFeHBvcnRBbGxEZWNsYXJhdGlvbic6IGNoZWNrU291cmNlLFxuICB9XG5cbiAgaWYgKGNvbnRleHQub3B0aW9uc1swXSAhPSBudWxsKSB7XG4gICAgY29uc3QgeyBjb21tb25qcywgYW1kIH0gPSBjb250ZXh0Lm9wdGlvbnNbMF1cblxuICAgIGlmIChjb21tb25qcyB8fCBhbWQpIHtcbiAgICAgIHZpc2l0b3JzWydDYWxsRXhwcmVzc2lvbiddID0gZnVuY3Rpb24gKGNhbGwpIHtcbiAgICAgICAgaWYgKGNvbW1vbmpzKSBjaGVja0NvbW1vbihjYWxsKVxuICAgICAgICBpZiAoYW1kKSBjaGVja0FNRChjYWxsKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2aXNpdG9yc1xufVxuXG5tb2R1bGUuZXhwb3J0cy5zY2hlbWEgPSBbXG4gIHtcbiAgICAndHlwZSc6ICdvYmplY3QnLFxuICAgICdwcm9wZXJ0aWVzJzoge1xuICAgICAgJ2NvbW1vbmpzJzogeyAndHlwZSc6ICdib29sZWFuJyB9LFxuICAgICAgJ2FtZCc6IHsgJ3R5cGUnOiAnYm9vbGVhbicgfSxcbiAgICB9LFxuICAgICdhZGRpdGlvbmFsUHJvcGVydGllcyc6IGZhbHNlLFxuICB9LFxuXVxuIl19