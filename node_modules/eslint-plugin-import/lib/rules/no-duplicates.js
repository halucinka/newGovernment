'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Map = require('babel-runtime/core-js/map')['default'];

var _Set = require('babel-runtime/core-js/set')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _coreResolve = require('../core/resolve');

var _coreResolve2 = _interopRequireDefault(_coreResolve);

module.exports = function (context) {
  var imported = new _Map();
  return {
    'ImportDeclaration': function ImportDeclaration(n) {
      // resolved path will cover aliased duplicates
      var resolvedPath = (0, _coreResolve2['default'])(n.source.value, context) || n.source.value;

      if (imported.has(resolvedPath)) {
        imported.get(resolvedPath).add(n.source);
      } else {
        imported.set(resolvedPath, new _Set([n.source]));
      }
    },

    'Program:exit': function ProgramExit() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(imported.entries()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2);

          var _module2 = _step$value[0];
          var nodes = _step$value[1];

          if (nodes.size > 1) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = _getIterator(nodes), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var node = _step2.value;

                context.report(node, '\'' + _module2 + '\' imported multiple times.');
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                  _iterator2['return']();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL25vLWR1cGxpY2F0ZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OzJCQUFvQixpQkFBaUI7Ozs7QUFFckMsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUNsQyxNQUFNLFFBQVEsR0FBRyxVQUFTLENBQUE7QUFDMUIsU0FBTztBQUNMLHVCQUFtQixFQUFFLDJCQUFVLENBQUMsRUFBRTs7QUFFaEMsVUFBSSxZQUFZLEdBQUcsOEJBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUE7O0FBRXJFLFVBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRTtBQUM5QixnQkFBUSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO09BQ3pDLE1BQU07QUFDTCxnQkFBUSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsU0FBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7T0FDaEQ7S0FDRjs7QUFFRCxrQkFBYyxFQUFFLHVCQUFZOzs7Ozs7QUFDMUIsMENBQTRCLFFBQVEsQ0FBQyxPQUFPLEVBQUUsNEdBQUU7OztjQUF0QyxRQUFNO2NBQUUsS0FBSzs7QUFDckIsY0FBSSxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTs7Ozs7O0FBQ2xCLGlEQUFpQixLQUFLLGlIQUFFO29CQUFmLElBQUk7O0FBQ1gsdUJBQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFNLFFBQU0saUNBQTZCLENBQUE7ZUFDN0Q7Ozs7Ozs7Ozs7Ozs7OztXQUNGO1NBQ0Y7Ozs7Ozs7Ozs7Ozs7OztLQUNGO0dBQ0YsQ0FBQTtDQUNGLENBQUEiLCJmaWxlIjoicnVsZXMvbm8tZHVwbGljYXRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZXNvbHZlIGZyb20gJy4uL2NvcmUvcmVzb2x2ZSdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICBjb25zdCBpbXBvcnRlZCA9IG5ldyBNYXAoKVxuICByZXR1cm4ge1xuICAgICdJbXBvcnREZWNsYXJhdGlvbic6IGZ1bmN0aW9uIChuKSB7XG4gICAgICAvLyByZXNvbHZlZCBwYXRoIHdpbGwgY292ZXIgYWxpYXNlZCBkdXBsaWNhdGVzXG4gICAgICBsZXQgcmVzb2x2ZWRQYXRoID0gcmVzb2x2ZShuLnNvdXJjZS52YWx1ZSwgY29udGV4dCkgfHwgbi5zb3VyY2UudmFsdWVcblxuICAgICAgaWYgKGltcG9ydGVkLmhhcyhyZXNvbHZlZFBhdGgpKSB7XG4gICAgICAgIGltcG9ydGVkLmdldChyZXNvbHZlZFBhdGgpLmFkZChuLnNvdXJjZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltcG9ydGVkLnNldChyZXNvbHZlZFBhdGgsIG5ldyBTZXQoW24uc291cmNlXSkpXG4gICAgICB9XG4gICAgfSxcblxuICAgICdQcm9ncmFtOmV4aXQnOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKGxldCBbbW9kdWxlLCBub2Rlc10gb2YgaW1wb3J0ZWQuZW50cmllcygpKSB7XG4gICAgICAgIGlmIChub2Rlcy5zaXplID4gMSkge1xuICAgICAgICAgIGZvciAobGV0IG5vZGUgb2Ygbm9kZXMpIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0KG5vZGUsIGAnJHttb2R1bGV9JyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcy5gKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH1cbn1cbiJdfQ==