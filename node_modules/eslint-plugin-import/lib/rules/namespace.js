'use strict';

var _Map = require('babel-runtime/core-js/map')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _coreGetExports = require('../core/getExports');

var _coreGetExports2 = _interopRequireDefault(_coreGetExports);

var _importDeclaration = require('../importDeclaration');

var _importDeclaration2 = _interopRequireDefault(_importDeclaration);

module.exports = function (context) {

  var namespaces = new _Map();

  function getImportsAndReport(namespace) {
    var declaration = (0, _importDeclaration2['default'])(context);

    var imports = _coreGetExports2['default'].get(declaration.source.value, context);
    if (imports == null) return null;

    if (imports.errors.length) {
      context.report({
        node: declaration.source,
        message: 'Parse errors in imported module ' + ('\'' + declaration.source.value + '\'.')
      });
      return;
    }

    if (!imports.hasNamed) {
      context.report(namespace, 'No exported names found in module \'' + declaration.source.value + '\'.');
    }

    return imports;
  }

  function message(identifier, namespace) {
    return '\'' + identifier.name + '\' not found in imported namespace ' + namespace.name + '.';
  }

  function declaredScope(name) {
    var references = context.getScope().references,
        i = undefined;
    for (i = 0; i < references.length; i++) {
      if (references[i].identifier.name === name) {
        break;
      }
    }
    if (!references[i]) return undefined;
    return references[i].resolved.scope.type;
  }

  return {
    'ImportNamespaceSpecifier': function ImportNamespaceSpecifier(namespace) {
      var imports = getImportsAndReport(namespace);
      if (imports == null) return;
      namespaces.set(namespace.local.name, imports.named);
    },

    // same as above, but does not add names to local map
    'ExportNamespaceSpecifier': function ExportNamespaceSpecifier(namespace) {
      getImportsAndReport(namespace);
    },

    // todo: check for possible redefinition

    'MemberExpression': function MemberExpression(dereference) {
      if (dereference.object.type !== 'Identifier') return;
      if (!namespaces.has(dereference.object.name)) return;

      if (dereference.parent.type === 'AssignmentExpression' && dereference.parent.left === dereference) {
        context.report(dereference.parent, 'Assignment to member of namespace \'' + dereference.object.name + '\'.');
      }

      if (dereference.computed) {
        context.report(dereference.property, 'Unable to validate computed reference to imported namespace \'' + dereference.object.name + '\'.');
        return;
      }

      var namespace = namespaces.get(dereference.object.name);
      if (!namespace.has(dereference.property.name)) {
        context.report(dereference.property, message(dereference.property, dereference.object));
      }
    },

    'VariableDeclarator': function VariableDeclarator(_ref) {
      var id = _ref.id;
      var init = _ref.init;

      if (init == null) return;
      if (id.type !== 'ObjectPattern') return;
      if (init.type !== 'Identifier') return;
      if (!namespaces.has(init.name)) return;

      // check for redefinition in intermediate scopes
      if (declaredScope(init.name) !== 'module') return;

      var namespace = namespaces.get(init.name);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(id.properties), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var property = _step.value;

          if (property.key.type !== 'Identifier') {
            context.report({
              node: property,
              message: 'Only destructure top-level names.'
            });
          } else if (!namespace.has(property.key.name)) {
            context.report({
              node: property,
              message: message(property.key, init)
            });
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  };
};
//# sourceMappingURL=data:application/json;base64,