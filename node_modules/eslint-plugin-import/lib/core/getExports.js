'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Map = require('babel-runtime/core-js/map')['default'];

var _Set = require('babel-runtime/core-js/set')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.recursivePatternCapture = recursivePatternCapture;

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

var _crypto = require('crypto');

var _parse2 = require('./parse');

var _parse3 = _interopRequireDefault(_parse2);

var _resolve = require('./resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _ignore = require('./ignore');

var _ignore2 = _interopRequireDefault(_ignore);

// map from settings sha1 => path => export map objects
var exportCaches = new _Map();

var ExportMap = (function () {
  function ExportMap(context) {
    _classCallCheck(this, ExportMap);

    this.context = context;
    this.named = new _Set();

    this.errors = [];
  }

  /**
   * Traverse a patter/identifier node, calling 'callback'
   * for each leaf identifier.
   * @param  {node}   pattern
   * @param  {Function} callback
   * @return {void}
   */

  _createClass(ExportMap, [{
    key: 'resolveReExport',
    value: function resolveReExport(node, base) {
      var remotePath = _resolve2['default'].relative(node.source.value, base, this.settings);
      if (remotePath == null) return null;

      return ExportMap['for'](remotePath, this.context);
    }
  }, {
    key: 'captureDefault',
    value: function captureDefault(n) {
      if (n.type !== 'ExportDefaultDeclaration') return;
      this.named.add('default');
    }

    /**
     * capture all named exports from remote module.
     *
     * returns null if this node wasn't an ExportAllDeclaration
     * returns false if it was not resolved
     * returns true if it was resolved + parsed
     *
     * @param  {node} n
     * @param  {string} path - the path of the module currently parsing
     * @return {boolean?}
     */
  }, {
    key: 'captureAll',
    value: function captureAll(n, path) {
      if (n.type !== 'ExportAllDeclaration') return null;

      var remoteMap = this.resolveReExport(n, path);
      if (remoteMap == null) return false;

      remoteMap.named.forEach((function (name) {
        this.named.add(name);
      }).bind(this));

      return true;
    }
  }, {
    key: 'captureNamedDeclaration',
    value: function captureNamedDeclaration(n, path) {
      var _this = this;

      if (n.type !== 'ExportNamedDeclaration') return;

      // capture declaration
      if (n.declaration != null) {
        switch (n.declaration.type) {
          case 'FunctionDeclaration':
          case 'ClassDeclaration':
          case 'TypeAlias':
            // flowtype with babel-eslint parser
            this.named.add(n.declaration.id.name);
            break;
          case 'VariableDeclaration':
            n.declaration.declarations.forEach(function (d) {
              return recursivePatternCapture(d.id, function (id) {
                return _this.named.add(id.name);
              });
            });
            break;
        }
      }

      // capture specifiers
      var remoteMap = undefined;
      if (n.source) remoteMap = this.resolveReExport(n, path);

      n.specifiers.forEach((function (s) {
        if (s.type === 'ExportDefaultSpecifier') {
          // don't add it if it is not present in the exported module
          if (!remoteMap || !remoteMap.hasDefault) return;
        }

        this.named.add(s.exported.name);
      }).bind(this));
    }
  }, {
    key: 'settings',
    get: function get() {
      return this.context && this.context.settings;
    }
  }, {
    key: 'hasDefault',
    get: function get() {
      return this.named.has('default');
    }
  }, {
    key: 'hasNamed',
    get: function get() {
      return this.named.size > (this.hasDefault ? 1 : 0);
    }
  }], [{
    key: 'get',
    value: function get(source, context) {

      var path = (0, _resolve2['default'])(source, context);
      if (path == null) return null;

      return ExportMap['for'](path, context);
    }
  }, {
    key: 'for',
    value: function _for(path, context) {
      var exportMap = undefined;

      var cacheKey = hashObject(context.settings);
      var exportCache = exportCaches.get(cacheKey);
      if (exportCache === undefined) {
        exportCache = new _Map();
        exportCaches.set(cacheKey, exportCache);
      }

      exportMap = exportCache.get(path);
      // return cached ignore
      if (exportMap === null) return null;

      var stats = fs.statSync(path);
      if (exportMap != null) {
        // date equality check
        if (exportMap.mtime - stats.mtime === 0) {
          return exportMap;
        }
        // future: check content equality?
      }

      exportMap = ExportMap.parse(path, context);
      exportMap.mtime = stats.mtime;

      // ignore empties, optionally
      if (exportMap.named.size === 0 && (0, _ignore2['default'])(path, context)) {
        exportMap = null;
      }

      exportCache.set(path, exportMap);

      return exportMap;
    }
  }, {
    key: 'parse',
    value: function parse(path, context) {
      var m = new ExportMap(context);

      try {
        var ast = (0, _parse3['default'])(path, context);
      } catch (err) {
        m.errors.push(err);
        return m; // can't continue
      }

      ast.body.forEach(function (n) {
        m.captureDefault(n);
        m.captureAll(n, path);
        m.captureNamedDeclaration(n, path);
      });

      return m;
    }
  }]);

  return ExportMap;
})();

exports['default'] = ExportMap;

function recursivePatternCapture(pattern, callback) {
  switch (pattern.type) {
    case 'Identifier':
      // base case
      callback(pattern);
      break;

    case 'ObjectPattern':
      pattern.properties.forEach(function (_ref) {
        var value = _ref.value;

        recursivePatternCapture(value, callback);
      });
      break;

    case 'ArrayPattern':
      pattern.elements.forEach(function (element) {
        if (element == null) return;
        recursivePatternCapture(element, callback);
      });
      break;
  }
}

function hashObject(object) {
  var settingsShasum = (0, _crypto.createHash)('sha1');
  settingsShasum.update(JSON.stringify(object));
  return settingsShasum.digest('hex');
}
//# sourceMappingURL=data:application/json;base64,