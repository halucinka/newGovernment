'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var defaultParseOptions = {
  ecmaVersion: 6, // for espree, esprima. not needed for babylon
  sourceType: 'module'
};

exports['default'] = function (path) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var settings = _ref.settings;
  var ecmaFeatures = _ref.ecmaFeatures;

  var parser = settings && settings['import/parser'] || 'babylon';

  var _require = require(parser);

  var parse = _require.parse;
  var options = getOptions(parser, settings, ecmaFeatures);

  var ast = parse(_fs2['default'].readFileSync(path, { encoding: 'utf8' }), options);

  // bablyon returns top-level "File" node.
  return ast.type === 'File' ? ast.program : ast;
};

function getOptions(parser, settings, ecmaFeatures) {

  var options = _Object$assign({}, defaultParseOptions, settings && settings['import/parse-options']);

  function inferFeature(feat) {
    if (ecmaFeatures[feat] && options.plugins.indexOf(feat) < 0) {
      options.plugins.push(feat);
    }
  }

  // detect and handle "jsx" ecmaFeature
  if (parser === 'babylon') {
    if (ecmaFeatures) {
      options.plugins = options.plugins ? options.plugins.slice() : [];
      inferFeature('jsx');
      inferFeature('flow');
    }
  }

  return options;
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvcGFyc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztrQkFBZSxJQUFJOzs7O0FBRW5CLElBQU0sbUJBQW1CLEdBQUc7QUFDMUIsYUFBVyxFQUFFLENBQUM7QUFDZCxZQUFVLEVBQUUsUUFBUTtDQUNyQixDQUFBOztxQkFFYyxVQUFVLElBQUksRUFBbUM7bUVBQUosRUFBRTs7TUFBN0IsUUFBUSxRQUFSLFFBQVE7TUFBRSxZQUFZLFFBQVosWUFBWTs7QUFDckQsTUFBTSxNQUFNLEdBQUcsQUFBQyxRQUFRLElBQUksUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFLLFNBQVMsQ0FBQTs7aUJBRWpELE9BQU8sQ0FBQyxNQUFNLENBQUM7O0FBQTNCLE1BQUUsS0FBSyxZQUFMLEtBQUssQ0FBb0I7QUFDM0IsTUFBQSxPQUFPLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUE7O0FBRTFELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBRSxnQkFBRyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBQyxDQUFDLEVBQ3pDLE9BQU8sQ0FDUixDQUFBOzs7QUFHbEIsU0FBTyxHQUFHLENBQUMsSUFBSSxLQUFLLE1BQU0sR0FBRyxHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQTtDQUMvQzs7QUFHRCxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRTs7QUFFbEQsTUFBSSxPQUFPLEdBQUcsZUFBZSxFQUFFLEVBQ0YsbUJBQW1CLEVBQ25CLFFBQVEsSUFBSSxRQUFRLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFBOztBQUUxRSxXQUFTLFlBQVksQ0FBQyxJQUFJLEVBQUU7QUFDMUIsUUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUssT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxBQUFDLEVBQUU7QUFDN0QsYUFBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDM0I7R0FDRjs7O0FBR0QsTUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO0FBQ3hCLFFBQUksWUFBWSxFQUFFO0FBQ2hCLGFBQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQTtBQUNoRSxrQkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ25CLGtCQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7S0FDckI7R0FDRjs7QUFFRCxTQUFPLE9BQU8sQ0FBQTtDQUNmIiwiZmlsZSI6ImNvcmUvcGFyc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnXG5cbmNvbnN0IGRlZmF1bHRQYXJzZU9wdGlvbnMgPSB7XG4gIGVjbWFWZXJzaW9uOiA2LCAgLy8gZm9yIGVzcHJlZSwgZXNwcmltYS4gbm90IG5lZWRlZCBmb3IgYmFieWxvblxuICBzb3VyY2VUeXBlOiAnbW9kdWxlJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHBhdGgsIHsgc2V0dGluZ3MsIGVjbWFGZWF0dXJlcyB9ID0ge30pIHtcbiAgY29uc3QgcGFyc2VyID0gKHNldHRpbmdzICYmIHNldHRpbmdzWydpbXBvcnQvcGFyc2VyJ10pIHx8ICdiYWJ5bG9uJ1xuXG4gIGNvbnN0IHsgcGFyc2UgfSA9IHJlcXVpcmUocGFyc2VyKVxuICAgICAgLCBvcHRpb25zID0gZ2V0T3B0aW9ucyhwYXJzZXIsIHNldHRpbmdzLCBlY21hRmVhdHVyZXMpXG5cbiAgY29uc3QgYXN0ID0gcGFyc2UoIGZzLnJlYWRGaWxlU3luYyhwYXRoLCB7ZW5jb2Rpbmc6ICd1dGY4J30pXG4gICAgICAgICAgICAgICAgICAgLCBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgKVxuXG4gIC8vIGJhYmx5b24gcmV0dXJucyB0b3AtbGV2ZWwgXCJGaWxlXCIgbm9kZS5cbiAgcmV0dXJuIGFzdC50eXBlID09PSAnRmlsZScgPyBhc3QucHJvZ3JhbSA6IGFzdFxufVxuXG5cbmZ1bmN0aW9uIGdldE9wdGlvbnMocGFyc2VyLCBzZXR0aW5ncywgZWNtYUZlYXR1cmVzKSB7XG5cbiAgbGV0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKCB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGRlZmF1bHRQYXJzZU9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBzZXR0aW5ncyAmJiBzZXR0aW5nc1snaW1wb3J0L3BhcnNlLW9wdGlvbnMnXSlcblxuICBmdW5jdGlvbiBpbmZlckZlYXR1cmUoZmVhdCkge1xuICAgIGlmIChlY21hRmVhdHVyZXNbZmVhdF0gJiYgKG9wdGlvbnMucGx1Z2lucy5pbmRleE9mKGZlYXQpIDwgMCkpIHtcbiAgICAgIG9wdGlvbnMucGx1Z2lucy5wdXNoKGZlYXQpXG4gICAgfVxuICB9XG5cbiAgLy8gZGV0ZWN0IGFuZCBoYW5kbGUgXCJqc3hcIiBlY21hRmVhdHVyZVxuICBpZiAocGFyc2VyID09PSAnYmFieWxvbicpIHtcbiAgICBpZiAoZWNtYUZlYXR1cmVzKSB7XG4gICAgICBvcHRpb25zLnBsdWdpbnMgPSBvcHRpb25zLnBsdWdpbnMgPyBvcHRpb25zLnBsdWdpbnMuc2xpY2UoKSA6IFtdXG4gICAgICBpbmZlckZlYXR1cmUoJ2pzeCcpXG4gICAgICBpbmZlckZlYXR1cmUoJ2Zsb3cnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvcHRpb25zXG59XG4iXX0=