'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Map = require('babel-runtime/core-js/map')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.relative = relative;
exports['default'] = resolve;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var CASE_INSENSITIVE = _fs2['default'].existsSync((0, _path.join)(__dirname, 'reSOLVE.js'));

// http://stackoverflow.com/a/27382838
function fileExistsWithCaseSync(_x) {
  var _again = true;

  _function: while (_again) {
    var filepath = _x;
    _again = false;

    var dir = (0, _path.dirname)(filepath);
    if (dir === '/' || dir === '.' || /^[A-Z]:\\$/i.test(dir)) return true;
    var filenames = _fs2['default'].readdirSync(dir);
    if (filenames.indexOf((0, _path.basename)(filepath)) === -1) {
      return false;
    }
    _x = dir;
    _again = true;
    dir = filenames = undefined;
    continue _function;
  }
}

function fileExists(filepath) {
  if (CASE_INSENSITIVE) {
    // short-circuit if path doesn't exist, ignoring case
    return !(!_fs2['default'].existsSync(filepath) || !fileExistsWithCaseSync(filepath));
  } else {
    return _fs2['default'].existsSync(filepath);
  }
}

function relative(modulePath, sourceFile, settings) {

  function withResolver(resolver, config) {
    // resolve just returns the core module id, which won't appear to exist
    try {
      var filePath = resolver.resolveImport(modulePath, sourceFile, config);
      if (filePath === null) return null;

      if (filePath === undefined || !fileExists(filePath)) return undefined;

      return filePath;
    } catch (err) {
      return undefined;
    }
  }

  var configResolvers = settings['import/resolver'] || { 'node': settings['import/resolve'] }; // backward compatibility

  var resolvers = resolverReducer(configResolvers, new _Map());

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(resolvers.entries()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2);

      var _name = _step$value[0];
      var config = _step$value[1];

      var resolver = require('eslint-import-resolver-' + _name);

      var fullPath = withResolver(resolver, config);
      if (fullPath !== undefined) return fullPath;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

function resolverReducer(resolvers, map) {
  if (resolvers instanceof Array) {
    resolvers.forEach(function (r) {
      return resolverReducer(r, map);
    });
    return map;
  }

  if (typeof resolvers === 'string') {
    map.set(resolvers, null);
    return map;
  }

  if (typeof resolvers === 'object') {
    for (var key in resolvers) {
      map.set(key, resolvers[key]);
    }
    return map;
  }

  throw new Error('invalid resolver config');
}

/**
 * Givent
 * @param  {string} p - module path
 * @param  {object} context - ESLint context
 * @return {string} - the full module filesystem path;
 *                    null if package is core;
 *                    undefined if not found
 */

function resolve(p, context) {
  return relative(p, context.getFilename(), context.settings);
}

resolve.relative = relative;
//# sourceMappingURL=data:application/json;base64,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QUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQ3hCLFdBQU8sR0FBRyxDQUFBO0dBQ1g7O0FBRUQsTUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7QUFDakMsU0FBSyxJQUFJLEdBQUcsSUFBSSxTQUFTLEVBQUU7QUFDekIsU0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7S0FDN0I7QUFDRCxXQUFPLEdBQUcsQ0FBQTtHQUNYOztBQUVELFFBQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQTtDQUMzQzs7Ozs7Ozs7Ozs7QUFVYyxTQUFTLE9BQU8sQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFO0FBQzFDLFNBQU8sUUFBUSxDQUFFLENBQUMsRUFDRCxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQ3JCLE9BQU8sQ0FBQyxRQUFRLENBQ2pCLENBQUE7Q0FDakI7O0FBQ0QsT0FBTyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUEiLCJmaWxlIjoiY29yZS9yZXNvbHZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuaW1wb3J0IHsgZGlybmFtZSwgYmFzZW5hbWUsIGpvaW4gfSBmcm9tICdwYXRoJ1xuXG5jb25zdCBDQVNFX0lOU0VOU0lUSVZFID0gZnMuZXhpc3RzU3luYyhqb2luKF9fZGlybmFtZSwgJ3JlU09MVkUuanMnKSlcblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjczODI4MzhcbmZ1bmN0aW9uIGZpbGVFeGlzdHNXaXRoQ2FzZVN5bmMoZmlsZXBhdGgpIHtcbiAgdmFyIGRpciA9IGRpcm5hbWUoZmlsZXBhdGgpXG4gIGlmIChkaXIgPT09ICcvJyB8fCBkaXIgPT09ICcuJyB8fCAvXltBLVpdOlxcXFwkL2kudGVzdChkaXIpKSByZXR1cm4gdHJ1ZVxuICB2YXIgZmlsZW5hbWVzID0gZnMucmVhZGRpclN5bmMoZGlyKVxuICBpZiAoZmlsZW5hbWVzLmluZGV4T2YoYmFzZW5hbWUoZmlsZXBhdGgpKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiBmaWxlRXhpc3RzV2l0aENhc2VTeW5jKGRpcilcbn1cblxuZnVuY3Rpb24gZmlsZUV4aXN0cyhmaWxlcGF0aCkge1xuICBpZiAoQ0FTRV9JTlNFTlNJVElWRSkge1xuICAgIC8vIHNob3J0LWNpcmN1aXQgaWYgcGF0aCBkb2Vzbid0IGV4aXN0LCBpZ25vcmluZyBjYXNlXG4gICAgcmV0dXJuICEoIWZzLmV4aXN0c1N5bmMoZmlsZXBhdGgpIHx8ICFmaWxlRXhpc3RzV2l0aENhc2VTeW5jKGZpbGVwYXRoKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnMuZXhpc3RzU3luYyhmaWxlcGF0aClcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVsYXRpdmUobW9kdWxlUGF0aCwgc291cmNlRmlsZSwgc2V0dGluZ3MpIHtcblxuICBmdW5jdGlvbiB3aXRoUmVzb2x2ZXIocmVzb2x2ZXIsIGNvbmZpZykge1xuICAgIC8vIHJlc29sdmUganVzdCByZXR1cm5zIHRoZSBjb3JlIG1vZHVsZSBpZCwgd2hpY2ggd29uJ3QgYXBwZWFyIHRvIGV4aXN0XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGZpbGVQYXRoID0gcmVzb2x2ZXIucmVzb2x2ZUltcG9ydChtb2R1bGVQYXRoLCBzb3VyY2VGaWxlLCBjb25maWcpXG4gICAgICBpZiAoZmlsZVBhdGggPT09IG51bGwpIHJldHVybiBudWxsXG5cbiAgICAgIGlmIChmaWxlUGF0aCA9PT0gdW5kZWZpbmVkIHx8ICFmaWxlRXhpc3RzKGZpbGVQYXRoKSkgcmV0dXJuIHVuZGVmaW5lZFxuXG4gICAgICByZXR1cm4gZmlsZVBhdGhcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICBjb25zdCBjb25maWdSZXNvbHZlcnMgPSAoc2V0dGluZ3NbJ2ltcG9ydC9yZXNvbHZlciddXG4gICAgfHwgeyAnbm9kZSc6IHNldHRpbmdzWydpbXBvcnQvcmVzb2x2ZSddIH0pIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcblxuICBjb25zdCByZXNvbHZlcnMgPSByZXNvbHZlclJlZHVjZXIoY29uZmlnUmVzb2x2ZXJzLCBuZXcgTWFwKCkpXG5cbiAgZm9yIChsZXQgW25hbWUsIGNvbmZpZ10gb2YgcmVzb2x2ZXJzLmVudHJpZXMoKSkge1xuICAgIGNvbnN0IHJlc29sdmVyID0gcmVxdWlyZShgZXNsaW50LWltcG9ydC1yZXNvbHZlci0ke25hbWV9YClcblxuICAgIGxldCBmdWxsUGF0aCA9IHdpdGhSZXNvbHZlcihyZXNvbHZlciwgY29uZmlnKVxuICAgIGlmIChmdWxsUGF0aCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZnVsbFBhdGhcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVyUmVkdWNlcihyZXNvbHZlcnMsIG1hcCkge1xuICBpZiAocmVzb2x2ZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXNvbHZlcnMuZm9yRWFjaChyID0+IHJlc29sdmVyUmVkdWNlcihyLCBtYXApKVxuICAgIHJldHVybiBtYXBcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVzb2x2ZXJzID09PSAnc3RyaW5nJykge1xuICAgIG1hcC5zZXQocmVzb2x2ZXJzLCBudWxsKVxuICAgIHJldHVybiBtYXBcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVzb2x2ZXJzID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAobGV0IGtleSBpbiByZXNvbHZlcnMpIHtcbiAgICAgIG1hcC5zZXQoa2V5LCByZXNvbHZlcnNba2V5XSlcbiAgICB9XG4gICAgcmV0dXJuIG1hcFxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHJlc29sdmVyIGNvbmZpZycpXG59XG5cbi8qKlxuICogR2l2ZW50XG4gKiBAcGFyYW0gIHtzdHJpbmd9IHAgLSBtb2R1bGUgcGF0aFxuICogQHBhcmFtICB7b2JqZWN0fSBjb250ZXh0IC0gRVNMaW50IGNvbnRleHRcbiAqIEByZXR1cm4ge3N0cmluZ30gLSB0aGUgZnVsbCBtb2R1bGUgZmlsZXN5c3RlbSBwYXRoO1xuICogICAgICAgICAgICAgICAgICAgIG51bGwgaWYgcGFja2FnZSBpcyBjb3JlO1xuICogICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCBpZiBub3QgZm91bmRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZShwLCBjb250ZXh0KSB7XG4gIHJldHVybiByZWxhdGl2ZSggcFxuICAgICAgICAgICAgICAgICAsIGNvbnRleHQuZ2V0RmlsZW5hbWUoKVxuICAgICAgICAgICAgICAgICAsIGNvbnRleHQuc2V0dGluZ3NcbiAgICAgICAgICAgICAgICAgKVxufVxucmVzb2x2ZS5yZWxhdGl2ZSA9IHJlbGF0aXZlXG4iXX0=